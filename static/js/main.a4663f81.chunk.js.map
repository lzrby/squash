{"version":3,"sources":["components/DeltaArrow.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["ARROWS","up","down","DeltaArrow","_ref","value","react_default","a","createElement","type","arrow","className","concat","Math","abs","colorByPercent","percent","start","arguments","length","undefined","end","Player","name","rating","sets","sets_won","delta","prev_rating","winRate","floor","src","process","alt","title","role","aria-labelledby","style","color","components_DeltaArrow","Header","App","App_Header","data","map","player","App_Player","Object","assign","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+gCAGMA,EAAS,CACbC,GAAI,SACJC,KAAM,UAqBOC,EAlBI,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACpB,IAAKA,EACH,OAAOC,EAAAC,EAAAC,cAAA,aAET,IAAMC,EAAOJ,EAAQ,EAAI,KAAO,OAC1BK,EAAQV,EAAOS,GACrB,OACEH,EAAAC,EAAAC,cAAA,QAAMG,UAAS,gBAAAC,OAAkBH,IAC9BI,KAAKC,IAAIT,GACTK,ICdMK,EAAiB,SAACC,GAAsC,IAA7BC,EAA6BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAHzD,EAGyCG,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFvD,IAKZ,aAAAN,OADYK,EADmBD,EAAU,KAA1BK,EAAMJ,GAErB,gBCIIK,EAAS,SAAAlB,GAAmD,IAAhDmB,EAAgDnB,EAAhDmB,KAAMC,EAA0CpB,EAA1CoB,OAAQC,EAAkCrB,EAAlCqB,KAAMC,EAA4BtB,EAA5BsB,SAC9BC,EAAQH,EADkDpB,EAAlBwB,YAExCC,EAAUhB,KAAKiB,MAAOJ,EAAWD,EAAQ,KAE/C,OACEnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,OACEG,UAAU,gBACVoB,IAAG,GAAAnB,OAVYoB,UAUZ,aAAApB,OAA2BW,EAA3B,QACHU,IAAKV,IAEPjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBAAqBY,GACpCjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBACbL,EAAAC,EAAAC,cAAA,QAAM0B,MAAM,eACV5B,EAAAC,EAAAC,cAAA,QAAM2B,KAAK,MAAMC,kBAAgB,SAAjC,gBADF,KAIKX,GALP,IAOI,IACFnB,EAAAC,EAAAC,cAAA,QAAM0B,MAAM,YACV5B,EAAAC,EAAAC,cAAA,QAAM2B,KAAK,MAAMC,kBAAgB,YAAjC,gBADF,KAII9B,EAAAC,EAAAC,cAAA,QAAM6B,MAAO,CAAEC,MAAOvB,EAAec,KAAaA,EAAlD,QAKRvB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,wBAAwBa,GACxClB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACbL,EAAAC,EAAAC,cAAC+B,EAAD,CAAYlC,MAAOsB,QAevBa,EAAS,kBACblC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAAeoB,IAAG,GAAAnB,OApDdoB,UAoDc,YAA2BC,IAAI,SAChE3B,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iBAAd,SAEEL,EAAAC,EAAAC,cAAA,8BAgBSiC,EAXH,kBACVnC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACZgC,EAAKC,IAAI,SAAAC,GAAM,OACdvC,EAAAC,EAAAC,cAACsC,EAADC,OAAAC,OAAA,CAAQC,IAAKJ,EAAOtB,MAAUsB,SC7DlBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a4663f81.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ARROWS = {\n  up: '▲',\n  down: '▼',\n};\n\nconst DeltaArrow = ({ value }) => {\n  if (!value) {\n    return <span />;\n  }\n  const type = value > 0 ? 'up' : 'down';\n  const arrow = ARROWS[type];\n  return (\n    <span className={`delta-value__${type}`}>\n      {Math.abs(value)}\n      {arrow}\n    </span>\n  );\n};\n\nDeltaArrow.propTypes = {\n  value: PropTypes.number,\n};\n\nexport default DeltaArrow;\n","const RED = 0;\nconst GREEN = 120;\n\nexport const colorByPercent = (percent, start = RED, end = GREEN) => {\n  const delta = (end - start) * (percent / 100);\n  const hue = start + delta;\n  return `hsl(${hue}, 80%, 50%)`;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.scss';\nimport data from './rating.json';\n\nimport DeltaArrow from './components/DeltaArrow';\nimport { colorByPercent } from './utils';\n\nconst { PUBLIC_URL } = process.env;\n\nconst Player = ({ name, rating, sets, sets_won, prev_rating }) => {\n  const delta = rating - prev_rating;\n  const winRate = Math.floor((sets_won / sets) * 100);\n\n  return (\n    <div className=\"list__person\">\n      <img\n        className=\"person__image\"\n        src={`${PUBLIC_URL}/avatars/${name}.jpg`}\n        alt={name}\n      />\n      <div className=\"person__row\">\n        <div className=\"person__row__name\">{name}</div>\n        <div className=\"person__row__sets\">\n          <span title=\"sets played\">\n            <span role=\"img\" aria-labelledby=\"games\">\n              🏏\n            </span>\n            : {sets}\n          </span>\n          ,{' '}\n          <span title=\"win rate\">\n            <span role=\"img\" aria-labelledby=\"win rate\">\n              🥇\n            </span>\n            : <span style={{ color: colorByPercent(winRate) }}>{winRate}%</span>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"person__rating\">\n        <span className=\"person__rating-value\">{rating}</span>\n        <div className=\"person__rating-delta\">\n          <DeltaArrow value={delta} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nPlayer.propTypes = {\n  name: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired,\n  sets: PropTypes.number.isRequired,\n  sets_won: PropTypes.number.isRequired,\n  prev_rating: PropTypes.number.isRequired,\n};\n\nconst Header = () => (\n  <div className=\"header\">\n    <img className=\"header__icon\" src={`${PUBLIC_URL}/cup.png`} alt=\"logo\" />\n    <h1 className=\"header__title\">\n      SQUASH\n      <span>LEADERBOARD</span>\n    </h1>\n  </div>\n);\n\nconst App = () => (\n  <div className=\"app\">\n    <Header />\n    <div className=\"list\">\n      {data.map(player => (\n        <Player key={player.name} {...player} />\n      ))}\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}